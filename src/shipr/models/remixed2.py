# generated by datamodel-codegen:
#   filename:  ShipServiceDefinitions-OpenApi31Yaml.yaml
#   timestamp: 2024-02-17T19:09:14+00:00

from __future__ import annotations

from typing import List, Optional

from enum import Enum
from pydantic import AliasGenerator, BaseModel, ConfigDict, Field
from pydantic.alias_generators import to_pascal, to_snake


class BasePFType(BaseModel):
    model_config = ConfigDict(
        alias_generator=AliasGenerator(
            validation_alias=to_snake,
            serialization_alias=to_pascal,
        ),
        use_enum_values=True
    )


class Notifications(BasePFType):
    notification_type: List[str] 


class Address(BasePFType):
    address_line1: str 
    address_line2: Optional[str] 
    address_line3: Optional[str] 
    town: Optional[str] 
    postcode: Optional[str] 
    country: str 


class Enhancement(BasePFType):
    enhanced_compensation: Optional[str] 
    saturday_delivery_required: Optional[bool]


class HazardousGood(BasePFType):
    lqdgun_code: Optional[str] 
    lqdg_description: Optional[str] 
    lqdg_volume: Optional[float] 
    firearms: Optional[str] 


class Returns(BasePFType):
    returns_email: Optional[str] 
    email_message: Optional[str] 
    email_label: bool 


class ContentDetail(BasePFType):
    country_of_manufacture: str 
    country_of_origin: Optional[str] 
    manufacturers_name: Optional[str] 
    description: str 
    unit_weight: float 
    unit_quantity: int 
    unit_value: float 
    currency: str 
    tariff_code: Optional[str] 
    tariff_description: Optional[str] 
    article_reference: Optional[str] 


class DateTimeRange(BasePFType):
    from_: str 
    to: str 


class ContentData(BasePFType):
    name: str 
    data: str 


class LabelItem(BasePFType):
    name: str 
    data: str 


class Barcode(BasePFType):
    name: str 
    data: str 


class Image(BasePFType):
    name: str 
    data: str 


class PrintType(Enum):
    all_parcels = 'ALL_PARCELS'
    single_parcel = 'SINGLE_PARCEL'


class Document(BasePFType):
    data: str 


class ManifestShipment(BasePFType):
    shipment_number: str 
    service_code: str 


class CompletedShipment(BasePFType):
    shipment_number: Optional[str] 
    out_bound_shipment_number: Optional[str]
    in_bound_shipment_number: Optional[str] 
    partner_number: Optional[str] 


class CompletedReturnInfo(BasePFType):
    status: str 
    shipment_number: str 
    collection_time: DateTimeRange 


class Authentication(BasePFType):
    user_name: str 
    password: str 


class CompletedCancelInfo(BasePFType):
    status: Optional[str] 
    shipment_number: Optional[str] 


class SpecifiedNeighbour(BasePFType):
    address: Optional[List[Address]] = Field(None, description='')


class SafePlaceList(BasePFType):
    safe_place: Optional[List[str]] = Field(None, description='')


class NominatedDeliveryDateList(BasePFType):
    nominated_delivery_date: Optional[List[str]] 


class ServiceCodes(BasePFType):
    service_code: Optional[List[str]] = Field(None, description='')


class Hours(BasePFType):
    open: Optional[str] 
    close: Optional[str] 
    close_lunch: Optional[str] 
    after_lunch_opening: Optional[str] 


class Position(BasePFType):
    longitude: Optional[float] 
    latitude: Optional[float] 


class AlertType(Enum):
    error = 'ERROR'
    warning = 'WARNING'
    notification = 'NOTIFICATION'


class BaseRequest(BasePFType):
    authentication: Authentication 


class Contact(BasePFType):
    business_name: str 
    contact_name: Optional[str] 
    email_address: Optional[str] 
    telephone: Optional[str] 
    fax: Optional[str] 
    mobile_phone: Optional[str] 
    senders_name: Optional[str] 
    notifications: Optional[Notifications] 


class InBoundDetails(BasePFType):
    contract_number: str 
    service_code: str 
    total_shipment_weight: Optional[str] 
    enhancement: Optional[Enhancement] 
    reference_number1: Optional[str] 
    reference_number2: Optional[str] 
    reference_number3: Optional[str] 
    reference_number4: Optional[str] 
    reference_number5: Optional[str] 
    special_instructions1: Optional[str] 
    special_instructions2: Optional[str] 
    special_instructions3: Optional[str] 
    special_instructions4: Optional[str] 


class HazardousGoods(BasePFType):
    hazardous_good: List[HazardousGood] 


class ContentDetails(BasePFType):
    content_detail: List[ContentDetail] 


class CollectionInfo(BasePFType):
    collection_contact: Contact 
    collection_address: Address 
    collection_time: Optional[DateTimeRange] 


class ParcelContents(BasePFType):
    item: List[ContentData] 


class LabelData(BasePFType):
    item: List[LabelItem] 


class Barcodes(BasePFType):
    barcode: List[Barcode] 


class Images(BasePFType):
    image: List[Image] 


class ManifestShipments(BasePFType):
    manifest_shipment: List[ManifestShipment] 


class CompletedShipments(BasePFType):
    completed_shipment: List[CompletedShipment] 


class Alert(BasePFType):
    code: int 
    message: str 
    type: AlertType 


class CompletedCancel(BasePFType):
    completed_cancel_info: Optional[CompletedCancelInfo]


class PAF(BasePFType):
    postcode: Optional[str] 
    count: Optional[int] 
    specified_neighbour: Optional[List[SpecifiedNeighbour]] 

    @classmethod
    def from_postcode(cls, postcode: str) -> PAF:
        return cls(postcode=postcode)


class Department(BasePFType):
    department_id: Optional[List[int]] 
    service_codes: Optional[List[ServiceCodes]] 
    nominated_delivery_date_list: Optional[NominatedDeliveryDateList]


class Mon(BasePFType):
    hours: Optional[Hours] 


class Tue(BasePFType):
    hours: Optional[Hours] 


class Wed(BasePFType):
    hours: Optional[Hours] 


class Thu(BasePFType):
    hours: Optional[Hours] 


class Fri(BasePFType):
    hours: Optional[Hours] 


class Sat(BasePFType):
    hours: Optional[Hours] 


class Sun(BasePFType):
    hours: Optional[Hours] 


class BankHol(BasePFType):
    hours: Optional[Hours] 


class PrintLabelRequest(BaseRequest):
    shipment_number: str 
    print_format: Optional[str] 
    barcode_format: Optional[str] 
    print_type: Optional[PrintType] 


class PrintDocumentRequest(BaseRequest):
    shipment_number: str 
    document_type: int 
    print_format: Optional[str] 


class CreateManifestRequest(BaseRequest):
    department_id: Optional[int] 


class PrintManifestRequest(BaseRequest):
    manifest_number: str 
    print_format: Optional[str] 


class ReturnShipmentRequest(BaseRequest):
    shipment_number: str 
    collection_time: DateTimeRange 


class CCReserveRequest(BaseRequest):
    booking_reference: str 


class CancelShipmentRequest(BaseRequest):
    shipment_number: str 


class Parcel(BasePFType):
    weight: Optional[float] 
    length: Optional[int] 
    height: Optional[int] 
    width: Optional[int] 
    purpose_of_shipment: Optional[str] 
    invoice_number: Optional[str] 
    export_license_number: Optional[str] 
    certificate_number: Optional[str] 
    content_details: Optional[ContentDetails] 
    shipping_cost: Optional[float] 


class ParcelLabelData(BasePFType):
    parcel_number: Optional[str] 
    shipment_number: Optional[str] 
    journey_leg: Optional[str] 
    label_data: Optional[LabelData] 
    barcodes: Optional[Barcodes] 
    images: Optional[Images] 
    parcel_contents: Optional[List[ParcelContents]] 


class CompletedManifestInfo(BasePFType):
    department_id: int 
    manifest_number: str 
    manifest_type: str 
    total_shipment_count: int 
    manifest_shipments: ManifestShipments 


class CompletedShipmentInfoCreatePrint(BasePFType):
    lead_shipment_number: Optional[str] 
    shipment_number: Optional[str] 
    delivery_date: Optional[str] 
    status: str 
    completed_shipments: CompletedShipments 


class Alerts(BasePFType):
    alert: List[Alert] 


class Departments(BasePFType):
    department: Optional[List[Department]] 


class OpeningHours(BasePFType):
    mon: Optional[Mon] 
    tue: Optional[Tue] 
    wed: Optional[Wed] 
    thu: Optional[Thu] 
    fri: Optional[Fri] 
    sat: Optional[Sat] 
    sun: Optional[Sun] 
    bank_hol: Optional[BankHol] 


class CancelShipmentRequest1(BasePFType):
    cancel_shipment_request: CancelShipmentRequest 


class CCReserveRequest1(BasePFType):
    cc_reserve_request: CCReserveRequest 


class CreateManifestRequest1(BasePFType):
    create_manifest_request: CreateManifestRequest 


class PrintDocumentRequest1(BasePFType):
    print_document_request: PrintDocumentRequest 


class PrintLabelRequest1(BasePFType):
    print_label_request: PrintLabelRequest 


class PrintManifestRequest1(BasePFType):
    print_manifest_request: PrintManifestRequest 


class ReturnShipmentRequest1(BasePFType):
    return_shipment_request: ReturnShipmentRequest 


class BaseReply(BasePFType):
    alerts: Optional[Alerts] 


class Parcels(BasePFType):
    parcel: List[Parcel] 


class ShipmentLabelData(BasePFType):
    parcel_label_data: List[ParcelLabelData] 


class CompletedManifests(BasePFType):
    completed_manifest_info: List[CompletedManifestInfo] 


class NominatedDeliveryDates(BasePFType):
    service_code: Optional[str] 
    departments: Optional[Departments] 


class PostcodeExclusion(BasePFType):
    delivery_postcode: Optional[str] 
    collection_postcode: Optional[str] 
    departments: Optional[Departments] 


class PostOffice(BasePFType):
    post_office_id: Optional[str] 
    business: Optional[str] 
    address: Optional[Address] 
    opening_hours: Optional[OpeningHours] 
    distance: Optional[float] 
    availability: Optional[bool] 
    position: Optional[Position] 
    booking_reference: Optional[str] 


class CreatePrintReply(BaseReply):
    completed_shipment_info_create_print: Optional[CompletedShipmentInfoCreatePrint] 
    label: Optional[Document] 
    label_data: Optional[ShipmentLabelData] 
    partner_code: Optional[str] 


class PrintLabelReply(BaseReply):
    label: Optional[Document] 
    label_data: Optional[ShipmentLabelData] 
    partner_code: Optional[str] 


class PrintDocumentReply(BaseReply):
    label: Optional[Document] 
    label_data: Optional[ShipmentLabelData] 
    document_type: Optional[Document] 


class CreateManifestReply(BaseReply):
    completed_manifests: Optional[CompletedManifests]


class PrintManifestReply(BaseReply):
    manifest: Optional[Document] 


class ReturnShipmentReply(BaseReply):
    completed_shipment_info: Optional[CompletedReturnInfo]


class CCReserveReply(BaseReply):
    post_office: Optional[PostOffice] 


class CancelShipmentReply(BaseReply):
    completed_cancel: Optional[CompletedCancel] 


class InternationalInfo(BasePFType):
    parcels: Optional[Parcels] 
    exporter_customs_reference: Optional[str]
    recipient_importer_vat_no: Optional[str]
    original_export_shipment_no: Optional[str]
    documents_only: Optional[bool] 
    documents_description: Optional[str] 
    value_under200_us_dollars: Optional[bool]
    shipment_description: Optional[str] 
    comments: Optional[str] 
    invoice_date: Optional[str] 
    terms_of_delivery: Optional[str] 
    purchase_order_ref: Optional[str] 


class ConvenientCollect(BasePFType):
    postcode: Optional[str] 
    post_office: Optional[List[PostOffice]] 
    count: Optional[int] 
    post_office_id: Optional[str] 


class SpecifiedPostOffice(BasePFType):
    postcode: Optional[str] 
    post_office: Optional[List[PostOffice]] 
    count: Optional[int] 
    post_office_id: Optional[str] 


class CancelShipmentReply1(BasePFType):
    cancel_shipment_reply: CancelShipmentReply 


class CCReserveReply1(BasePFType):
    cc_reserve_reply: CCReserveReply 


class CreateManifestReply1(BasePFType):
    create_manifest_reply: CreateManifestReply 


class CreatePrintReply1(BasePFType):
    create_print_reply: CreatePrintReply 


class PrintDocumentReply1(BasePFType):
    print_document_reply: PrintDocumentReply 


class PrintLabelReply1(BasePFType):
    print_label_reply: PrintLabelReply 


class PrintManifestReply1(BasePFType):
    print_manifest_reply: PrintManifestReply 


class ReturnShipmentReply1(BasePFType):
    return_shipment_reply: ReturnShipmentReply 


class FindRequest(BaseRequest):
    convenient_collect: Optional[ConvenientCollect]
    specified_post_office: Optional[SpecifiedPostOffice]
    paf: Optional[PAF] 
    safe_places: Optional[bool] 
    nominated_delivery_dates: Optional[NominatedDeliveryDates]
    postcode_exclusion: Optional[PostcodeExclusion]


class FindReply(BaseReply):
    convenient_collect: Optional[ConvenientCollect]
    specified_post_office: Optional[SpecifiedPostOffice]
    paf: Optional[PAF] 
    safe_place_list: Optional[SafePlaceList] 
    nominated_delivery_dates: Optional[NominatedDeliveryDates]
    postcode_exclusion: Optional[PostcodeExclusion]


class DeliveryOptions(BasePFType):
    convenient_collect: Optional[ConvenientCollect]
    irts: Optional[bool] 
    letterbox: Optional[bool] 
    specified_post_office: Optional[SpecifiedPostOffice]
    specified_neighbour: Optional[str] 
    safe_place: Optional[str] 
    pin: Optional[int] 
    named_recipient: Optional[bool] 
    address_only: Optional[bool] 
    nominated_delivery_date: Optional[str] 
    personal_parcel: Optional[str] 


class FindReply1(BasePFType):
    find_reply: FindReply 


class FindRequest1(BasePFType):
    find_request: FindRequest 


class RequestedShipment(BasePFType):
    department_id: Optional[int] 
    shipment_type: str 
    contract_number: str 
    request_id: Optional[int] 
    service_code: str 
    pre_printed: Optional[bool] 
    shipping_date: Optional[str] 
    job_reference: Optional[str] 
    recipient_contact: Contact 
    recipient_address: Address 
    importer_contact: Optional[Contact] 
    importer_address: Optional[Address] 
    exporter_contact: Optional[Contact] 
    exporter_address: Optional[Address] 
    sender_contact: Optional[Contact] 
    sender_address: Optional[Address] 
    total_number_of_parcels: Optional[int] 
    total_shipment_weight: Optional[float] 
    enhancement: Optional[Enhancement] 
    delivery_options: Optional[DeliveryOptions] 
    hazardous_goods: Optional[HazardousGoods] 
    returns: Optional[Returns] 
    drop_off_ind: Optional[str] 
    print_own_label: Optional[bool] 
    collection_info: Optional[CollectionInfo] 
    international_info: Optional[InternationalInfo]
    reference_number1: Optional[str] 
    reference_number2: Optional[str] 
    reference_number3: Optional[str] 
    reference_number4: Optional[str] 
    reference_number5: Optional[str] 
    special_instructions1: Optional[str] 
    special_instructions2: Optional[str] 
    special_instructions3: Optional[str] 
    special_instructions4: Optional[str] 
    in_bound_contact: Optional[Contact] 
    in_bound_address: Optional[Address] 
    in_bound_details: Optional[InBoundDetails] 
    exchange_instructions1: Optional[str] 
    exchange_instructions2: Optional[str] 
    exchange_instructions3: Optional[str] 
    consignment_handling: Optional[bool] 


class CompletedShipmentInfo(BasePFType):
    lead_shipment_number: Optional[str] 
    delivery_date: Optional[str] 
    status: str 
    completed_shipments: CompletedShipments 
    requested_shipment: RequestedShipment 


class CreateShipmentRequest(BaseRequest):
    requested_shipment: RequestedShipment 


class CreateShipmentReply(BaseReply):
    completed_shipment_info: Optional[CompletedShipmentInfo]


class CreatePrintRequest(BaseRequest):
    requested_shipment: RequestedShipment 


class CreatePrintRequest1(BasePFType):
    create_print_request: CreatePrintRequest 


class CreateShipmentReply1(BasePFType):
    create_shipment_reply: CreateShipmentReply 


class CreateShipmentRequest1(BasePFType):
    create_shipment_request: CreateShipmentRequest 
